stream {
  lua_shared_dict conf 50m;
  lua_shared_dict rate_data 200m;

  init_worker_by_lua_block {
    local function reload_conf()
      local cjson = require "cjson"
      local conf = ngx.shared.conf

      local valid_attrs = {}
      valid_attrs["helo_name"] = true
      valid_attrs["sender"] = true
      valid_attrs["recipient"] = true
      valid_attrs["client_address"] = true
      valid_attrs["client_name"] = true
      valid_attrs["reverse_client_name"] = true
      valid_attrs["sasl_username"] = true
      valid_attrs["sasl_sender"] = true

      local conf_data = {}

      local conf_file, ok = io.open("/usr/local/etc/policy.conf", "rb")
      if conf_file then
        local c = conf_file:read("*all")
        conf_file:close()
        ok, conf_data = pcall(function() return cjson.decode(c) end)
        if not ok then
          ngx.log(ngx.ERR, "Config: Configuration is not valid json")
        end
      else
        ngx.log(ngx.ERR, "Config: Unable to open /usr/local/etc/policy.conf")
      end

      if conf_data["wforce_host"] then
        ngx.log(ngx.ERR, "Config: Wforce host is " .. tostring(conf_data["wforce_host"]))
        conf:set("wforce_host", conf_data["wforce_host"])
      else
        conf:delete("wforce_host")
      end

      if tonumber(conf_data["wforce_port"]) then
        ngx.log(ngx.ERR, "Config: Wforce port is " .. tostring(conf_data["wforce_port"]))
        conf:set("wforce_port", tonumber(conf_data["wforce_port"]))
      else
        conf:delete("wforce_port")
      end

      if conf_data["wforce_user"] then
        ngx.log(ngx.ERR, "Config: Wforce user is " .. tostring(conf_data["wforce_user"]))
        conf:set("wforce_user", tostring(conf_data["wforce_user"]))
      else
        conf:delete("wforce_user")
      end

      if conf_data["wforce_pass"] then
        ngx.log(ngx.ERR, "Config: Wforce password is ****")
        conf:set("wforce_pass", tostring(conf_data["wforce_pass"]))
      else
        conf:delete("wforce_pass")
      end

      for k, v in pairs(valid_attrs) do
        -- Store useable postfix policy attributes in memory
        conf:set(k, "1")
        if conf_data["default_cluster_" .. k] and tonumber(conf_data["default_cluster_" .. k]) > 0 then
          ngx.log(ngx.ERR, "Config: Default cluster " .. k .. " rate set to " .. tostring(conf_data["default_cluster_" .. k]))
          conf:set("default_cluster_" .. k, conf_data["default_cluster_" .. k])
        else
          conf:delete("default_cluster_" .. k)
        end

        if conf_data["default_local_" .. k] and tonumber(conf_data["default_local_" .. k]) > 0 then
          ngx.log(ngx.ERR, "Config: Default local " .. k .. " rate set to " .. tostring(conf_data["default_local_" .. k]))
          conf:set("default_local_" .. k, conf_data["default_local_" .. k])
        else
          conf:delete("default_local_" .. k)
        end

        if type(conf_data[k]) == "table" then
          for x, z in pairs(conf_data[k]) do
            if type(z) == "table" then
              local a,b = next(z)
              if tonumber(b) then
                ngx.log(ngx.ERR, "Config: Adding " .. k .. " rate limit for " .. tostring(a) .. " with value " .. tostring(b))
                -- Letting records expire makes it easier to remove entries
                conf:set(k .. ":" .. tostring(a), tonumber(b), 65)
              end
            end
          end
        end
      end

      ok, err = ngx.timer.at(60, reload_conf)
      if not ok then
        ngx.log(ngx.ERR, "Config: Failed to set timer: " .. err)
      end
    end

    reload_conf()
  }


  server {
    listen 10000;

    content_by_lua_block {
      local rate_data = ngx.shared.rate_data
      local conf = ngx.shared.conf

      local cjson = require "cjson"

      local function read_status(s)
        -- Returns the integer HTTP status from Weakforced
        local line, err = s:receive("*l")
        if not line then
          return nil, "Wforce: " .. err
        end

        local status = string.sub(line, 10, 12)
        return tonumber(status), ""
      end

      local function read_headers(s)
        -- Reads HTTP headers from Weakforced
        -- Returns a table with available headers (not used)
        local h = {}
        local cnt = 0
        repeat
          local line, err = s:receive("*l")
          if not line then
            return nil, "Wforce: " .. err
          end

          local m, err = ngx.re.match(line, "([^:\\s]+):\\s*(.*)", "jo")
          if err then
            ngx.log(ngx.ERR, "Wforce: Error parsing header. " .. err)
          end

          if not m then
            break
          end

          local k = m[1]
          local v = m[2]
          h[k] = tostring(v)
          cnt = cnt + 1
          if cnt > 10 then
            return nil, "Wforce: Header limit reached"
          end
        until ngx.re.find(line, "^\\s*$", "jo")

        return h, ""
      end

      local function read_body(s)
        -- Reads HTTP body from Weakforced
        -- Returns a table with the decoded json data
        -- This should be improved
        local b
        local cnt = 0
        repeat
          local line, err = s:receive("*l")
          if not line then
            return nil, "Wforce: " .. err
          end
          if ngx.re.find(line, "^{") then
            b = line
            break
          end
          cnt = cnt + 1
          if cnt > 10 then
            return nil, "Wforce: No json data"
          end
        until ngx.re.find(line, "^\\s*$", "jo")

        local ok, w_d = pcall(function() return cjson.decode(b) end)
        if not ok then
          return nil, "Wforce: Unparseable body json data: " .. tostring(b)
        end

        if not w_d["success"] or not w_d["r_attrs"] then
          return nil, "Wforce: Request failed: " .. tostring(b)
        end

        return w_d["r_attrs"], ""
      end

      local function calc_rate(cur, prev, sec, rem)
        -- Applies the sliding window rate calculation
        -- Adapted to ten minute buckets (to be improved)
        -- Based on https://blog.cloudflare.com/counting-things-a-lot-of-different-things/
        if type(cur) ~= "number" or type(prev) ~= "number" or type(sec) ~= "number" or type(rem) ~= "number"  then
          return nil, "Rate: Invalid arguments"
        end

        local r = prev * ( (600 - (rem * 60 + sec ) ) / 600 ) + cur
        return r, ""
      end

      --
      -- Main
      --

      local t = {}
      local sock, err = ngx.req.socket(true)
      if not sock then
        ngx.log(ngx.ERR, "Failed to open request socket: ", err)
        ngx.say("action=dunno\n")
        return
      end

      local readline = sock:receiveuntil("\n")
      local cnt = 0
      while true do
        local data, err, partial = readline()
        if not data then
          ngx.log(ngx.ERR, "Failed to read from request socket: " .. err)
          ngx.say("action=dunno\n")
          return
        end

        if data == "" then
          break
        end

        local sep = string.find(data, "=", 1, true)
        if sep then
          local k = string.sub(data, 1, sep - 1)
          local v = string.sub(data, sep + 1)
          if v and #v > 0 and conf:get(k) then
            t[k] = v
          end
        else
          ngx.log(ngx.ERR, "Bad policy line format: " .. data)
        end
        if cnt > 40 then
          ngx.log(ngx.ERR, "Policy service header limit reached")
          break
        end
        cnt = cnt + 1
      end

      local wforce_host = conf:get("wforce_host")
      local wforce_port = conf:get("wforce_port")
      local wforce_user = conf:get("wforce_user")
      local wforce_pass = conf:get("wforce_pass")

      local cluster_mode = wforce_host and wforce_port and wforce_user and wforce_pass

      -- Mostly used when no cluster available
      local timestamp = ngx.time()
      local total_days = math.floor(timestamp / 60 / 60 / 24)
      local total_hours = math.floor(timestamp / 60 / 60)
      local utc_hour = total_hours % 24
      local minutes = math.floor(timestamp / 60) - (total_hours * 60)
      local seconds = timestamp % 60
      local logdate = "Total days: " .. total_days .. ", UTC hour: " .. utc_hour .. ", Minute in hour: " .. minutes .. ", Seconds in minute: " .. seconds

      -- 10 minute buckets (Used with local mode)
      local cur_bucket = math.floor(minutes / 10)
      local cur_bucket_remainder = minutes % 10
      local prev_bucket = (cur_bucket + 5) % 6

      --
      --

      if cluster_mode then
        -- Probably should fall back to local mode if something goes wrong
        local basic = ngx.encode_base64(wforce_user .. ":" .. wforce_pass)
        local auth = "Basic " .. basic

        local d = {}
        d["attrs"] = {}
        for k, v in pairs(t) do
          d["attrs"][k] = v
        end
        local d_str = cjson.encode(d)

        local send_data = "POST /?command=addRateData HTTP/1.1\r\n"
        send_data = send_data .. "Host: localhost\r\n"
        send_data = send_data .. "Content-Type: application/json\r\n"
        send_data = send_data .. "Authorization: " .. auth .. "\r\n"
        send_data = send_data .. "Content-Length: " .. tostring(#d_str) .. "\r\n"
        send_data = send_data .. "\r\n"
        send_data = send_data .. d_str

        local wforce_sock = ngx.socket.tcp()
        wforce_sock:settimeout(2000)
        local ok, err = wforce_sock:connect(wforce_host, wforce_port)
        if not ok then
          ngx.log(ngx.ERR, "Failed to connect to Wforced (" .. wforce_host .. ":" .. tostring(wforce_port) .. "): " .. err)
          ngx.say("action=dunno\n")
          return
        end

        local bytes, err = wforce_sock:send(send_data)
        if not bytes then
          ngx.log(ngx.ERR, "Failed to send data to Wforced: " .. err)
          ngx.say("action=dunno\n")
          return
        end

        local status, err = read_status(wforce_sock)
        if status ~= 200 then
          ngx.log(ngx.ERR, "Wrong status from Wforced: " .. (tostring(status) or "Unknown"))
          ngx.say("action=dunno\n")
          return
        end

        local headers, err = read_headers(wforce_sock)
        if not headers then
          ngx.log(ngx.ERR, err)
          ngx.say("action=dunno\n")
          return
        end

        local body, err = read_body(wforce_sock)
        if not body then
          ngx.log(ngx.ERR, err)
          ngx.say("action=dunno\n")
          return
        end

        for k, v in pairs(t) do
          local rate_limit = tonumber(conf:get(k .. ":" .. v) or conf:get("default_cluster_" .. k) or 0)
          if rate_limit > 0 then
            local cur_val = tonumber(body[k .. ":" .. v .. ":cur"] or 0)
            local pre_val = tonumber(body[k .. ":" .. v .. ":prev"] or 0)

            local rate, err = calc_rate(cur_val, pre_val, seconds, cur_bucket_remainder)
            if rate and rate > rate_limit then
              ngx.log(ngx.ERR, "Rate for " .. k .. ":" .. v .. " is too high: " .. tostring(rate))
              ngx.say("action=defer_if_permit Rate limited access. Try again later\n")
              return
            end
          end
        end
        --
      else
        --
        ngx.log(ngx.ERR, "No Wforce configuration available. Local rates")
        local cb = tostring(cur_bucket)
        local pb = tostring(prev_bucket)
        for k, v in pairs(t) do
          local rate_limit = tonumber(conf:get(k .. ":" .. v) or conf:get("default_local_" .. k) or 0)
          if rate_limit > 0 then
          local ch = "helo:" .. t["helo_name"] .. ":" .. cb
            -- With local rates, Keep records in memory for 2 buckets plus a few seconds
            local cur_val = rate_data:incr(k .. ":" .. v .. ":" .. cb, 1, 0, 1220)
            local pre_val = rate_data:get(k .. ":" .. v .. ":" .. pb) or 0

            local rate, err = calc_rate(cur_val, pre_val, seconds, cur_bucket_remainder)
            if rate and rate > rate_limit then
              ngx.log(ngx.ERR, "Rate for " .. k .. ":" .. v .. " is too high: " .. tostring(rate))
              ngx.say("action=defer_if_permit Rate limited access. Try again later\n")
              return
            end
          end
        end
      end

      ngx.say("action=dunno\n")
    }
  }
}
